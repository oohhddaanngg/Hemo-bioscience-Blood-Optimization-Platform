**Version:** 0.5.2
**Date:** 2025-09-24

---

### **Current Task: Plan integration of optimization engine into Future Specifications modal**

**Phase:** 1 (Planning)

**Goal:** Design the user interface and workflow for displaying and accepting blood sharing/optimization suggestions directly within the new Future Specifications editing modal.

**Key Objectives (this phase):**
1.  Define how optimization suggestions are presented to the user on a per-sample basis.
2.  Determine the workflow for a user to "accept" a suggestion and have it automatically update the sample's specifications.
3.  Finalize the logic for recalculating the overall BUP/procurement needs after changes are made.

---

## **Project Roadmap & Status**

### **Priority 0: Critical Fixes & Foundational Changes**

| Task | Status | Version | Notes |
| :--- | :--- | :--- | :--- |
| **Fix & Overhaul Manufacturing Calendar** | `Completed` | v0.4.4 | On-click modal for event entry/edit; removed old manual entry section. |
| **Implement Shipment Tracking** | `Completed` | v0.4.4 | Added "Blood Ship Date" & "Blood Arrival Date" into the calendar modal system. |

---

### **Priority 1: UI/UX & Structural Reorganization**

| Task | Status | Version | Notes |
| :--- | :--- | :--- | :--- |
| **Remove Redundant Modals** | `Completed` | v0.4.2 | Removed "Master Schedule," "Specifications Generator," and "Other Raw Materials" modals. |
| **Rename & Relocate Modals** | `Completed` | v0.4.5 | Renamed "Specifications" â†’ "Historical Specifications"; promoted "Future Specifications" panel. |
| **Implement Automation: Annual Migration** | `Completed` | v0.4.6 | User-initiated Settings process to migrate future specs to historical specs. |
| **Enhance Future Specifications Module** | `Completed` | v0.5.2 | Implemented editable modal for future spec samples with in-line editing, versioning, and cloning capabilities. |

---

### **Priority 2: New Module Development**

| Task | Status | Version | Notes |
| :--- | :--- | :--- | :--- |
| **Enhance "Historical Quantities"** | `Completed` | v0.4.7 | Built module with manual/CSV input and annual migration tool for order quantities. |
| **Build out the "Vendors" module** | `Completed` | v0.4.8 | Activated module; core CRUD for non-blood suppliers. |
| **Create the "Blood Suppliers" module** | `Completed` | v0.4.9 | Manage RBC suppliers with complex, tiered pricing rules. |

---

### **Priority 3: Existing Module Enhancement & Review**

| Task | Status | Version | Notes |
| :--- | :--- | :--- | :--- |
| **Implement "Bulk RBCs" & "Bulk Serums" logic** | `Completed` | v0.5.0 | Inventory tracking for RBCs and Serums with overage management. |
| **Audit and enhance "Antibodies" module** | `Completed` | v0.5.1 | Delivered lot-aware inventory, new modals, price visibility, and requalification logic. |

---

Excellent. A button to reveal suggestions is a clean and effective approach. It keeps the primary interface uncluttered while making powerful recommendations easily accessible.

With that decision made, we can proceed.

**Phase 2: Instruction**

Here are the detailed technical instructions for the developer AI. This task will build upon the newly created editing modal by adding the optimization logic and the user interface for displaying and accepting suggestions.

---

### **Technical Instructions for Developer AI: Integrate Optimization Suggestions into Future Spec Modal**

**Objective:**
Enhance the "Edit Future Spec" modal (`future-spec-edit-modal`) to include an on-demand optimization feature. This involves adding a new column with a button that, when clicked, reveals a popover with actionable suggestions for that specific sample.

**1. HTML & UI Modifications (in `Blood Optimization Platform - v0.5.0.html`)**

   a. **Add "Optimization" Column:** In the `<thead>` of the editable table (`#future-spec-edit-table`), add a new final column:
      ```html
      <th>Optimization</th>
      ```

   b. **Add "Optimize" Button Cell:** In the `viewFutureSpec(specKey)` function, when you dynamically generate the table rows, add a final `<td>` for each sample. This cell should contain a button that will trigger the optimization analysis for that specific row.
      ```html
      <td>
          <button class="btn btn-outline btn-sm" onclick="showOptimizationSuggestions(event, '${specKey}', ${idx})">
              ðŸ’¡ Suggestions
          </button>
      </td>
      ```
      -   `idx` should be the index of the sample in the array being mapped.

   c. **Create Popover Structure (CSS):** While we will create the popover dynamically, add the necessary CSS to style it. Add this to the main `<style>` block.
      ```css
      .optimization-popover {
          position: absolute;
          background: var(--white);
          border: 1px solid var(--border);
          border-radius: 8px;
          box-shadow: var(--shadow-lg);
          padding: 1rem;
          width: 350px;
          z-index: 1100; /* Must be higher than the modal z-index */
          display: none; /* Hidden by default */
      }
      .optimization-suggestion {
          border-bottom: 1px solid var(--border);
          padding-bottom: 0.75rem;
          margin-bottom: 0.75rem;
      }
      .optimization-suggestion:last-child {
          border-bottom: none;
          margin-bottom: 0;
      }
      .suggestion-header {
          font-weight: 600;
          color: var(--hemo-blue);
      }
      .suggestion-details {
          font-size: 0.875rem;
          color: var(--gray);
          margin: 0.25rem 0;
      }
      ```

**2. JavaScript Logic & Functions**

   a. **Implement `showOptimizationSuggestions(event, specKey, rowIndex)`:**
      -   This function is called when the "ðŸ’¡ Suggestions" button is clicked.
      -   **Prevent Modal Click:** Start with `event.stopPropagation();` to prevent the click from propagating.
      -   **Find the Spec:** Get the specific sample object from `APP_STATE.futureSpecs.entries` using the `specKey` and `rowIndex`.
      -   **Run Analysis:** Call a new helper function, `findBestSuggestionForSample(spec)`, which will contain the core optimization logic (see step 2b).
      -   **Build Popover HTML:**
          -   If `findBestSuggestionForSample` returns no suggestions, the popover should display "No optimization opportunities found."
          -   If it returns suggestions, iterate through them and build the HTML for each one, including the description, details, and an "Accept" button. The `Accept` button should call another new function, `acceptSuggestion`.
          -   Example HTML for one suggestion:
              ```html
              <div class="optimization-suggestion">
                  <div class="suggestion-header">Assign O Positive</div>
                  <div class="suggestion-details">Source: HQC Standing Order Overage. Saves 1 unit purchase.</div>
                  <button class="btn btn-success btn-sm" onclick="acceptSuggestion(...)">Accept</button>
              </div>
              ```
      -   **Display Popover:** Create a `div` element, assign it the `optimization-popover` class, and set its `innerHTML`. Position it near the clicked button. Add a global click listener to `document` to close the popover when clicking anywhere else.

   b. **Implement `findBestSuggestionForSample(spec)` (Helper Function):**
      -   This function will contain the core logic, which you can adapt from the previous `runFutureSpecOptimization` logic, but focused on a *single* sample.
      -   It must adhere to the rules in the `Project Business Logic Manual.md`.
      -   **Logic Steps:**
          1.  Calculate the `fulfillmentWindow` for the spec.
          2.  Create an empty array, `suggestions`.
          3.  **Check Standing Orders:** Check for compatible overage from HQC, C3, etc., that falls within the fulfillment window. If a match is found, push a formatted suggestion object to the `suggestions` array.
          4.  **Check PT Event Sharing:** Search for other *approved* future specs or recent historical specs whose fulfillment windows overlap. If a compatible spec with potential overage is found, push a suggestion object.
          5.  Return the `suggestions` array. Each object should contain `{ abo, rh, antigens, sourceDescription, savingsDetails }`.

   c. **Implement `acceptSuggestion(specKey, rowIndex, suggestionObject)`:**
      -   This function is called when an "Accept" button inside the popover is clicked.
      -   It receives the `suggestionObject` which contains the proposed `abo`, `rh`, and `antigens`.
      -   Find the corresponding `<select>` and other form elements for that specific row (`rowIndex`) in the modal's table.
      -   **Update the UI:** Programmatically set the `value` of the ABO, Rh, and antigen `<select>` elements on the screen to match the suggestion.
      -   Close the popover.
      -   Show a temporary confirmation (e.g., flash the row green) to indicate the suggestion was applied. The user will still need to click the main "Save Changes" button to persist it.
